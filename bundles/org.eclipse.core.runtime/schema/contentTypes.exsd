<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.core.runtime">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.core.runtime" id="contentTypes" name="Content Types"/>
      </appInfo>
      <documentation>
         The content types extension point allows plug-ins to contribute to the platform content type catalog. There are two forms of contributions: &lt;cite&gt;content types&lt;/cite&gt; and &lt;cite&gt;file associations&lt;/cite&gt;.
&lt;ul&gt;
&lt;li&gt;
a content type represents a file format and its naming conventions. Content types can be defined from scratch, or can inherit from existing ones, specializing them
&lt;/li&gt;
&lt;li&gt;
a file association extends an existing content type by associating new file names and/or extensions to it&lt;/li&gt;&lt;/ul&gt;
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="content-type" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="file-association" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  a fully qualified identifier of the target extension point
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  an optional identifier of the extension instance
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  an optional name of the extension instance
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="content-type">
      <complexType>
         <sequence>
            <element ref="describer" minOccurs="0" maxOccurs="1"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  the identifier for this content type (simple id token, unique for content types within the extension namespace). The token cannot contain dot (.) or whitespace
               </documentation>
            </annotation>
         </attribute>
         <attribute name="base-type" type="string">
            <annotation>
               <documentation>
                  the fully qualified identifier of this content type&apos;s base type. This content type will inherit its base type&apos;s file associations, content describer and default charset, unless they are redefined
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  the human-readable name of this content type
               </documentation>
            </annotation>
         </attribute>
         <attribute name="file-extensions" type="string">
            <annotation>
               <documentation>
                  a comma-separated list of file extensions to be associated with this content type
               </documentation>
            </annotation>
         </attribute>
         <attribute name="file-names" type="string">
            <annotation>
               <documentation>
                  a comma-separated list of file names to be associated with this content type
               </documentation>
            </annotation>
         </attribute>
         <attribute name="priority" use="default" value="normal">
            <annotation>
               <documentation>
                  the priority for this content type. Priorities are used to solve conflicts (when two content types are associated to the same file name/extension)
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="low">
                  </enumeration>
                  <enumeration value="normal">
                  </enumeration>
                  <enumeration value="high">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="default-charset" type="string">
            <annotation>
               <documentation>
                  the default charset for this content type. Should be an empty string, if this content type should not have a default charset even if the parent has one
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="describer">
      <complexType>
         <sequence>
            <element ref="parameter" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  the fully qualified name of a class that implements &lt;samp&gt;org.eclipse.core.runtime.content.IContentDescriber&lt;/samp&gt; or &lt;samp&gt;org.eclipse.core.runtime.content.ITextContentDescriber&lt;/samp&gt;
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.core.runtime.content.IContentDescriber"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="file-association">
      <complexType>
         <attribute name="content-type" type="string" use="required">
            <annotation>
               <documentation>
                  the fully qualified identifier for the content type this file association contributes to
               </documentation>
            </annotation>
         </attribute>
         <attribute name="file-names" type="string">
            <annotation>
               <documentation>
                  a comma-separated list of file names to be associated with the target content type
               </documentation>
            </annotation>
         </attribute>
         <attribute name="file-extensions" type="string">
            <annotation>
               <documentation>
                  a comma-separated list of file extensions to be associated with the target content type
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="parameter">
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  the name of this parameter made available to instances of the specified application class
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string" use="required">
            <annotation>
               <documentation>
                  the value of this parameter made available to instances of the specified application class
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         3.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         Following is an example of a XML-based content type declaration using the &lt;code&gt;XMLRootElementContentDescriber&lt;/code&gt; (a built-in describer): 
&lt;p&gt;
&lt;pre&gt;
   &lt;extension point=&quot;org.eclipse.core.runtime.contentTypes&quot;&gt; 
      &lt;content-type id=&quot;ABC&quot;
       base-type=&quot;org.eclipse.core.runtime.xml&quot;      
       file-extensions=&quot;a,b,c&quot;&gt;
       &lt;describer class=&quot;org.eclipse.core.runtime.content.XMLRootElementContentDescriber&quot;&gt;
        &lt;param name=&quot;element&quot; value=&quot;abc&quot;/&gt;
       &lt;/describer&gt;
      &lt;/content-type&gt; 
   &lt;/extension&gt; 
&lt;/pre&gt;
&lt;/p&gt;
Here is an example of a simple text-based content type that has a specific file extension:
&lt;p&gt;
&lt;pre&gt;
   &lt;extension point=&quot;org.eclipse.core.runtime.contentTypes&quot;&gt; 
      &lt;content-type id=&quot;MyText&quot;
       base-type=&quot;org.eclipse.core.runtime.text&quot;
       file-extensions=&quot;mytxt&quot;/&gt;
   &lt;/extension&gt; 
&lt;/pre&gt;
&lt;/p&gt;
In a case like the example above, when we are just trying to associate new file names/extensions to an existing content type, to contribute a file association is usually the best thing to do:
&lt;p&gt;
&lt;pre&gt;
   &lt;extension point=&quot;org.eclipse.core.runtime.contentTypes&quot;&gt; 
      &lt;file-association 
       content-type=&quot;org.eclipse.core.runtime.text&quot;
       file-extensions=&quot;mytxt&quot;/&gt;
   &lt;/extension&gt; 
&lt;/pre&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         The value of the class attribute in the describer element must represent an 
implementor of 
&lt;samp&gt;org.eclipse.core.runtime.content.IContentDescriber&lt;/samp&gt; or &lt;samp&gt;org.eclipse.core.runtime.content.ITextContentDescriber&lt;/samp&gt;.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         &lt;p&gt;The org.eclipse.core.runtime plug-in provides the following content types:&lt;ul&gt;
&lt;li&gt;org.eclipse.core.runtime.text&lt;/li&gt;
&lt;li&gt;org.eclipse.core.runtime.xml&lt;/li&gt;
&lt;/ul&gt;
Other plug-ins in the platform contribute other content types.
&lt;/p&gt;
&lt;p&gt;
Also, the org.eclipse.core.runtime plug-in provides ready-to-use implementations of content describers:&lt;ul&gt;
&lt;li&gt;org.eclipse.core.runtime.content.XMLRootElementContentDescriber&lt;/li&gt;
&lt;li&gt;org.eclipse.core.runtime.content.BinarySignatureDescriber&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2004 IBM Corporation and others.
All rights reserved. This program and the accompanying materials are made available under the terms of the Common Public License v1.0 which accompanies this distribution, and is available at &lt;a href=&quot;http://www.eclipse.org/legal/cpl-v10.html&quot;&gt;http://www.eclipse.org/legal/cpl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
