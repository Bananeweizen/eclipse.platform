package org.eclipse.team.internal.ccvs.core.resources.api;

/*
 * (c) Copyright IBM Corp. 2000, 2001.
 * All Rights Reserved.
 */

import org.eclipse.team.internal.ccvs.core.CVSException;

/**
 * The managedFile gives you an FolderProperties-Object, that
 * conains CVS-specific information about a file. It takes
 * care about tracking files in every folder and additional
 * information about these files.
 * 
 * One of the most important things are getFolders() and 
 * getFiles(). These functions give you files/folders that:<ul>
 * <li> do exist locally
 * <li> do exist in the entrie-file of this folder
 * <li> do satisfy both of the above criteria
 * </ul>
 * 
 * You can find out wether a resource locally exists with exists()
 * and you can find out whether it is in the entries with isManaged().
 * 
 * Folders that do not exist, can only be generated by deleting the
 * folder. It is not of much use, because the FolderProperties is saved in the
 * folder itself and therefore can not be saved as long as the folder
 * does not exist.
 * 
 * @see IManagedResource
 */
public interface IManagedFolder extends IManagedResource {
		
	/**
	 * Get all the folders in the current folder.
	 * There are three types of folders:<ul>
	 * <li> Does exist() but not isManaged() (local, non registered folder. Should we ignore?)
	 * <li> Does not exist() but isManaged() (deleted folder?)
	 * <li> Does exist() and isManaged() (normal registerd file)
	 * </ul>
	 * 
	 * @throws CVSException if not exists()
	 */
	IManagedFolder[] getFolders() throws CVSException;
	
	/**
	 * Get all the files in the current folder
	 * There are three types of files:<ul>
	 * <li> Does exist() but not isManaged() (local, non registerd file)
	 * <li> Does not exist() but isManaged() (deleted file without remove or commit?)
	 * <li> Does exist() and isManaged() (normal registerd file)
	 * </ul>
	 * 
	 * @throws CVSException if not exists()
	 */
	IManagedFile[] getFiles() throws CVSException;
	
	/**
	 * 
	 * => is about to be renamed to getFolder()
	 * 
	 * @throws CVSException if not exists()
	 */
	IManagedFolder getFolder(String name) throws CVSException;
	
	/**
	 * Does create a file in the given folder. Does not accept
	 * any subfolders given in that moment. 
	 * 
	 * => is about to be renamed to getFile()
	 * 
	 * @throws CVSException if not exists()
	 */
	IManagedFile getFile(String name) throws CVSException;

	/**
	 * States if the resource at the given path relative to this
	 * folder does exist.
	 */
	boolean childExists(String path);
	
	/**
	 * Return the child resource at the given path relative to
	 * the receiver.
	 * 
	 * @throws CVSException if childExists(path) = false
	 */
	IManagedResource getChild(String path) throws CVSException;
	
	/**
	 * Create the folder if it did not exist before. Does only
	 * work if the direct subfolder did exist.
	 * 
	 * @throws CVSException if for some reason it was not possible to create the folder
	 */
	void mkdir() throws CVSException;

	/**
	 * Get Infos about the folder.
	 * 
	 * Changing the Object has no influence on
	 * the infos of the file, you need to set it.
	 * 
	 * @see IManagedFolder#setFolderInfo(FolderProperties)
	 * @return null if isManaged() == false (but not returns non-null if isManaged() == true)
	 * @return null if exists() == false (but not returns non-null if exists() == true)
	 */
	FolderProperties getFolderInfo() throws CVSException;
	
	/**
	 * Set the infos of the folder.
	 * 
	 * @param if folderInfo == null, the info is removed
	 * @throws CVSException if (folderInfo!=null & exists()==false)
	 */
	void setFolderInfo(FolderProperties folderInfo) throws CVSException;
	
	/**
	 * Attache a property to the folder.
	 * 
	 * @param content==null has the same effect as unsetProperty, 
	          content==String[0] creates an empty Property
	 * @throws CVSFileNotFoundException if exists() = false
	 */
	void setProperty(String key, String[] content) throws CVSException;
	
	/**
	 * Get the property of a folder.
	 * 
	 * @return the contend of the property if the property does exsist, null otherwise
	 * @throws CVSFileNotFoundException if exists() = false
	 * @throws NoCVSFolderException if isCVSFolder() = false of the underling CVSFolder
	 */
	String[] getProperty(String key) throws CVSException;
	
	/**
	 * Gives the ability of the folder to store properties back.
	 * 
	 *   (isCVSFolder() == true) <=> (getFolderInfo() != null)
	 */
	boolean isCVSFolder() throws CVSException;
	
	/**
	 * Visitor-Pattern.<br>
	 * 
	 * Accepts the visitor on all files and all subFolder
	 * in the folder.
	 * First all the files are to be called then all the folders are
	 * to be called.
	 */
	public void acceptChildren(IManagedVisitor visitor) throws CVSException;

}


