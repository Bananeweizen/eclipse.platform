

package org.eclipse.ant.internal.ui.datatransfer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.TreeSet;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.variables.VariablesPlugin;
import org.eclipse.debug.core.DebugPlugin;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.eclipse.debug.core.ILaunchManager;
import org.eclipse.debug.internal.core.LaunchManager;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.internal.junit.launcher.JUnitLaunchConfiguration;
import org.eclipse.jdt.internal.junit.util.TestSearchEngine;
import org.eclipse.jdt.launching.IJavaLaunchConfigurationConstants;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * Creates build.xml file.
 */
public class BuildFileCreator
{
    public static final String NEWLINE = System.getProperty("line.separator");

    private static final String WARNING = "WARNING: Autogenerated file by eclipse2ant. " +
                                          "Any modifications will be overwritten." + NEWLINE +
                                          "             Please edit build-user.xml instead!" + NEWLINE;
    
    private static final String USER_TARGET = "<target name=\"help\">" + NEWLINE +
                                              "    <echo message=\"Please run: $ ant -v -projecthelp\"/>" + NEWLINE +
                                              "</target>";
    
    /**
     * Check if build.xml exists that was not written by eclipse2ant.
     */
    public static boolean existsBuildFile(String projectRoot)
    {
        File buildFile = new File(projectRoot + "/build.xml");
        if (buildFile.exists())
        {
            BufferedReader in = null;
            try
            {
                in = new BufferedReader(new FileReader(buildFile));
                String line;
                while ((line = in.readLine()) != null)
                {
                    if (("<!--" + WARNING).startsWith(line))
                    {
                        return false;
                    }
                }
            }
            catch (Exception e)
            {
                return false;
            }
            finally
            {
                try
                {
                    if (in != null)
                    {
                        in.close();
                    }
                }
                catch (IOException e)
                {
                }
            }
        }
        return false;
    }
    
    public static void create(String projectName, String projectRoot, List rawClassPathEntries, List srcDirs,
                       List classDirs, List inclusionLists, List exclusionLists, Map variable2valueMap,
                       IJavaProject javaProject)
            throws ParserConfigurationException, TransformerConfigurationException, TransformerException, IOException, CoreException

    {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        Document doc = dbf.newDocumentBuilder().newDocument();
      
        // <project name="hello" default="build" basedir=".">
        Element root = doc.createElement("project");
        root.setAttribute("name" , projectName);
        root.setAttribute("default" , "build");
        root.setAttribute("basedir" , ".");
        doc.appendChild(root);

        // <!-- warning -->
        Comment comment = doc.createComment(WARNING);
        doc.insertBefore(comment, root);
        
        // <path id="project.classpath">
        //     <pathelement location="x.jar"/>
        // </path>
        Element classpathElement = doc.createElement("path");
        classpathElement.setAttribute("id", "project.classpath");
        List classDirsUnique = removeDuplicates(classDirs);
        for (Iterator iter = classDirsUnique.iterator(); iter.hasNext();)
        {
            String classDir = (String) iter.next();
            Element pathElement = doc.createElement("pathelement");
            pathElement.setAttribute("location", classDir);
            classpathElement.appendChild(pathElement);
        }
        List rawClassPathEntriesUnique = removeDuplicates(rawClassPathEntries);
        for (Iterator iter = rawClassPathEntriesUnique.iterator(); iter.hasNext();)
        {
            String entry = (String) iter.next();
            Element pathElement = doc.createElement("pathelement");
            pathElement.setAttribute("location", entry);
            classpathElement.appendChild(pathElement);
        }
        root.appendChild(classpathElement);

        // <target name="init">
        //     <mkdir dir="classes"/>
        // </target>
        Element element = doc.createElement("target");
        element.setAttribute("name", "init");
        for (Iterator iter = classDirsUnique.iterator(); iter.hasNext();)
        {
            String classDir = (String) iter.next();
            if (! classDir.equals("."))
            {
                Element pathElement = doc.createElement("mkdir");
                pathElement.setAttribute("dir", classDir);
                element.appendChild(pathElement);
            }
        }
        root.appendChild(element);

        // <target name="clean">
        //     <delete dir="classes"/>
        // </target>
        element = doc.createElement("target");
        element.setAttribute("name", "clean");
        for (Iterator iter = classDirsUnique.iterator(); iter.hasNext();)
        {
            String classDir = (String) iter.next();
            if (! classDir.equals("."))
            {
                Element deleteElement = doc.createElement("delete");
                deleteElement.setAttribute("dir", classDir);
                element.appendChild(deleteElement);
            }
        }
        root.appendChild(element);

        // several source directories may compile to same class directory
        Map class2sourcesMap = new TreeMap();
        Map class2includesMap = new TreeMap();
        Map class2excludesMap = new TreeMap();
        for (int i = 0; i < srcDirs.size(); i++)
        {
            String srcDir = (String) srcDirs.get(i);
            String classDir = (String) classDirs.get(i);
            List includeList = (List) inclusionLists.get(i);
            List excludeList = (List) exclusionLists.get(i);
            Set sources = (Set) class2sourcesMap.get(classDir);
            if (sources == null)
            {
                sources = new TreeSet();
            }
            sources.add(srcDir);
            class2sourcesMap.put(classDir, sources);
            Set includes = (Set) class2includesMap.get(classDir);
            if (includes == null)
            {
                includes = new TreeSet();
            }
            includes.addAll(includeList);
            class2includesMap.put(classDir, includes);
            Set excludes = (Set) class2excludesMap.get(classDir);
            if (excludes == null)
            {
                excludes = new TreeSet();
            }
            excludes.addAll(excludeList);
            class2excludesMap.put(classDir, excludes);
        }
        
        // <target name="build" depends="init">
        //     <javac destdir="classes">
        //         <src path="src"/>
        //         <include name=""/>
        //         <exclude name=""/>
        //         <classpath refid="project.classpath"/>
        //     </javac>    
        // </target>
        element = doc.createElement("target");
        element.setAttribute("name", "build");
        element.setAttribute("depends", "init");
        for (Iterator iter = class2sourcesMap.keySet().iterator(); iter.hasNext();)
        {
            String classDir = (String) iter.next();
            Set sources = (Set) class2sourcesMap.get(classDir);           
            Set inclusions = (Set) class2includesMap.get(classDir);
            Set exclusions = (Set) class2excludesMap.get(classDir);
            Element javacElement = doc.createElement("javac");
            javacElement.setAttribute("destdir", classDir);
            for (Iterator iterator = sources.iterator(); iterator.hasNext();)
            {
                String src = (String) iterator.next();
                Element srcElement = doc.createElement("src");
                srcElement.setAttribute("path", src);
                javacElement.appendChild(srcElement);
            }           
            for (Iterator iterator = inclusions.iterator(); iterator.hasNext();)
            {
                String inclusion = (String) iterator.next();
                Element includeElement = doc.createElement("include");
                includeElement.setAttribute("name", inclusion);
                javacElement.appendChild(includeElement);
            }           
            for (Iterator iterator = exclusions.iterator(); iterator.hasNext();)
            {
                String exclusion = (String) iterator.next();
                Element excludeElement = doc.createElement("exclude");
                excludeElement.setAttribute("name", exclusion);
                javacElement.appendChild(excludeElement);
            }           
            Element classpathRefElement = doc.createElement("classpath");
            classpathRefElement.setAttribute("refid", "project.classpath");
            javacElement.appendChild(classpathRefElement);
            element.appendChild(javacElement);
        }
        root.appendChild(element);
        
        // <target name="run">
        //     <java fork="yes" classname="class" failonerror="true" dir="." newenvironment="true">
        //         <env key="a" value="b"/>
        //         <jvmarg value="-Dx=y"/>
        //         <arg value="arg"/>
        //         <classpath refid="project.classpath"/>
        //     </java>
        // </target>
        ILaunchConfiguration[] confs = DebugPlugin.getDefault().getLaunchManager().getLaunchConfigurations();
        for (int i = 0; i < confs.length; i++)
        {
            ILaunchConfiguration conf = confs[i];
            if (!projectName.equals(conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_PROJECT_NAME, "")))
            {
                continue;
            }
                    
            if (conf.getType().getIdentifier().equals(IJavaLaunchConfigurationConstants.ID_JAVA_APPLICATION))
            {
                element = doc.createElement("target");
                element.setAttribute("name", conf.getName());
                Element javaElement = doc.createElement("java");
                javaElement.setAttribute("fork", "yes");
                javaElement.setAttribute("classname", conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_MAIN_TYPE_NAME, ""));
                javaElement.setAttribute("failonerror", "true");
                String dir = conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_WORKING_DIRECTORY, "");
                addProperty(variable2valueMap, dir);                
                if (!dir.equals(""))
                {
                    javaElement.setAttribute("dir", dir);
                }
                if (!conf.getAttribute(LaunchManager.ATTR_APPEND_ENVIRONMENT_VARIABLES, true))
                {
                    javaElement.setAttribute("newenvironment", "true");
                }
                Map props = conf.getAttribute(ILaunchManager.ATTR_ENVIRONMENT_VARIABLES, new TreeMap());
                addElements(props, doc, javaElement, "env", "key", "value");
                addElements(conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_VM_ARGUMENTS, ""), doc, javaElement, "jvmarg", "value");
                addElements(conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_PROGRAM_ARGUMENTS, ""), doc, javaElement, "arg", "value");                    
                element.appendChild(javaElement);
                Element classpathRefElement = doc.createElement("classpath");
                classpathRefElement.setAttribute("refid", "project.classpath");
                javaElement.appendChild(classpathRefElement);
                root.appendChild(element);
            }
            else if (conf.getType().getIdentifier().equals(IJavaLaunchConfigurationConstants.ID_JAVA_APPLET))
            {
                String dir = conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_WORKING_DIRECTORY, "");
                if (dir.equals(""))
                {
                    dir = projectRoot;
                }
                String value = addProperty(variable2valueMap, dir);
                String htmlfile = ((value != null) ? value : dir) + File.separator + conf.getName() + ".html";
                // NOTE: Silently overwrites html file
                AppletUtil.buildHTMLFile(conf, htmlfile);
                element = doc.createElement("target");
                element.setAttribute("name", conf.getName());
                Element javaElement = doc.createElement("java");
                javaElement.setAttribute("fork", "yes");
                javaElement.setAttribute("classname", conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_APPLET_APPLETVIEWER_CLASS, "sun.applet.AppletViewer"));
                javaElement.setAttribute("failonerror", "true");
                if (value != null)
                {
                    javaElement.setAttribute("dir", dir);
                }
                addElements(conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_VM_ARGUMENTS, ""), doc, javaElement, "jvmarg", "value");
                addElements(conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_PROGRAM_ARGUMENTS, ""), doc, javaElement, "arg", "value");
                addElements(conf.getName() + ".html", doc, javaElement, "arg", "value");                   
                element.appendChild(javaElement);
                Element classpathRefElement = doc.createElement("classpath");
                classpathRefElement.setAttribute("refid", "project.classpath");
                javaElement.appendChild(classpathRefElement);
                root.appendChild(element);
            }
            else if (conf.getType().getIdentifier().equals(JUnitLaunchConfiguration.ID_JUNIT_APPLICATION))
            {                    
                addJUnitTask(javaProject, doc, root, variable2valueMap, conf);
            }
            
        }
        
        // <property name="x" value="y"/>
        for (Iterator iter = variable2valueMap.keySet().iterator(); iter.hasNext();)
        {
            String key = (String) iter.next();
            String value = (String) variable2valueMap.get(key);
            Element prop = doc.createElement("property");
            prop.setAttribute("name", key);
            prop.setAttribute("value", value);
            root.insertBefore(prop, classpathElement);
        }
      
        // convert document to formatted XML string
        StringWriter writer = new StringWriter();
        Source source = new DOMSource(doc);
        Result result = new StreamResult(writer);
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
        transformer.transform(source, result);

        // add DOCTYPE and entity reference
        // NOTE: It is not possible to write a DOCTYPE with an internal DTD using transformer.
        //       It is also not possible to write an entity reference with JAXP.
        StringBuffer xml = new StringBuffer(writer.toString());
        int index = xml.indexOf(NEWLINE) != -1 ? xml.indexOf(NEWLINE) : 0;
        xml.insert(index, NEWLINE + "<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>");
        index = xml.indexOf("basedir") != -1 ? xml.indexOf("basedir") : 0;
        index = xml.indexOf(NEWLINE, index);
        if (index != -1)
        {
            xml.insert(index, NEWLINE + "    &buildfile;");
        }
              
        // write build file
        BufferedWriter out = new BufferedWriter(new FileWriter(projectRoot + "/build.xml"));
        out.write(xml.toString());
        out.close();
        
        // create user build file
        File userBuildFile = new File(projectRoot + "/build-user.xml");
        if (! userBuildFile.exists())
        {
            out = new BufferedWriter(new FileWriter(userBuildFile));
            out.write(USER_TARGET);
            out.close();                
        }
    }

    /**
     * Add variable/value for Eclipse variable. If given string is no variable, nothing is added.
     * 
     * @param variable2valueMap   property map to add variable/value
     * @param variable            Eclipse variable, e.g. ${project_name}
     * @param return              variable value, or <code>null</code> if given string is no variable
     */
    private static String addProperty(Map variable2valueMap, String variable) throws CoreException
    {
        if (variable == null || variable.equals(""))
        {
            return null;
        }
        String value;
        try
        {
            value = VariablesPlugin.getDefault().getStringVariableManager().performStringSubstitution(variable);    
        }
        catch (CoreException e)
        {
            // cannot resolve variable
            return null;
        }
        if (!variable.equals(value))
        {
            variable2valueMap.put(Eclipse2AntAction.removePrefixAndSuffix(variable, "${", "}"), value);
        }
        return null;
    }

    /**
     * Convert JUnit launch configuration to JUnit task and add it to a document. 
     */
    public static void addJUnitTask(IJavaProject javaProject, Document doc, Element root, Map variable2valueMap, ILaunchConfiguration conf) throws CoreException
    {
        // <target name="runtest">
        //     <junit fork="yes" printsummary="withOutAndErr">
        //         <formatter type="plain"/>
        //         <test name="testclass"/>
        //         <env key="a" value="b"/>
        //         <jvmarg value="-Dx=y"/>
        //         <classpath refid="project.classpath"/>
        //     </junit>
        // </target>
        String testClass = conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_MAIN_TYPE_NAME, "");
        Element element;
        element = doc.createElement("target");
        element.setAttribute("name", conf.getName());
        Element junitElement = doc.createElement("junit");
        junitElement.setAttribute("fork", "yes");
        junitElement.setAttribute("printsummary", "withOutAndErr");
        String dir = conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_WORKING_DIRECTORY, "");
        addProperty(variable2valueMap, dir);                
        if (!dir.equals(""))
        {
            junitElement.setAttribute("dir", dir);
        }
        if (!conf.getAttribute(LaunchManager.ATTR_APPEND_ENVIRONMENT_VARIABLES, true))
        {
            junitElement.setAttribute("newenvironment", "true");
        }
        Element formatterElement = doc.createElement("formatter");
        formatterElement.setAttribute("type", "plain");
        junitElement.appendChild(formatterElement);
        if (!testClass.equals(""))
        {
            // Case 1: Single JUnit class
            Element testElement = doc.createElement("test");
            testElement.setAttribute("name", testClass);
            junitElement.appendChild(testElement);                       
        }
        else
        {
            // Case 2: Run all tests in project, package or source folder
            String container = conf.getAttribute(JUnitLaunchConfiguration.LAUNCH_CONTAINER_ATTR, "");
            IType[] types = findTestsInContainer(javaProject, container);
            for (int i = 0; i < types.length; i++)
            {
                IType type = types[i];
                Element testElement = doc.createElement("test");
                testElement.setAttribute("name", type.getFullyQualifiedName());
                junitElement.appendChild(testElement);                       
            }
        }
        Map props = conf.getAttribute(ILaunchManager.ATTR_ENVIRONMENT_VARIABLES, new TreeMap());
        addElements(props, doc, junitElement, "env", "key", "value");
        addElements(conf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_VM_ARGUMENTS, ""), doc, junitElement, "jvmarg", "value");
        element.appendChild(junitElement);
        Element classpathRefElement = doc.createElement("classpath");
        classpathRefElement.setAttribute("refid", "project.classpath");
        junitElement.appendChild(classpathRefElement);
        root.appendChild(element);
    }

    /**
     * Create child nodes from string list <code>values</code> and add them to <code>element</code> which is part of
     * <code>doc</code>.
     * 
     * @param values           whitespace separated string
     * @param doc              XML document
     * @param element          node to add children to
     * @param elementName      name of new child node
     * @param attributeName    name of attribute for <code>values</code>
     */
    public static void addElements(String values, Document doc, Element element, String elementName,
                                   String attributeName) throws CoreException
    {
        StringTokenizer tokenizer = new StringTokenizer(values);
        while (tokenizer.hasMoreTokens())
        {
            String item = tokenizer.nextToken();   
            Element itemElement = doc.createElement(elementName);
            itemElement.setAttribute(attributeName, item);
            element.appendChild(itemElement);            
        }
    }

    /**
     * Create child nodes from string map and add them to <code>element</code> which is part of
     * <code>doc</code>.
     * 
     * @param map                   key/value string pairs
     * @param doc                   XML document
     * @param element               node to add children to
     * @param elementName           name of new child node
     * @param keyAttributeName      name of key attribute
     * @param valueAttributeName    name of value attribute
     */
    public static void addElements(Map map, Document doc, Element element, String elementName,
                                   String keyAttributeName, String valueAttributeName) throws CoreException
    {
        for (Iterator iter = map.keySet().iterator(); iter.hasNext();)
        {
            String key = (String) iter.next();
            String value = (String) map.get(key);
            Element itemElement = doc.createElement(elementName);
            itemElement.setAttribute(keyAttributeName, key);
            itemElement.setAttribute(valueAttributeName, value);
            element.appendChild(itemElement);            
        }
    }
    
    /**
     * Find JUnit tests. Same tests are also returned by Eclipse run configuration wizard.
     *  
     * @param containerHandle    project, package or source folder
     * 
     * @see org.eclipse.jdt.internal.junit.launcher.JUnitBaseLaunchConfiguration
     */
    public static IType[] findTestsInContainer(IJavaProject javaProject, String containerHandle)
    {
        IJavaElement container;
        try
        {
            container = JavaCore.create(containerHandle);
        }
        catch (Exception e)
        {
            return new IType[0];
        }
        Set result = new HashSet();
        try
        {
            return TestSearchEngine.findTests(new Object[] { container });
        }
        catch (Exception e)
        {
            return new IType[0];
        }
    }
 
    /**
     * Remove duplicates preserving original order.
     * @param l list to remove duplicates from
     * @return new list without duplicates 
     */
    public static List removeDuplicates(List l)
    {
        List res = new ArrayList();
        for (Iterator iter = l.iterator(); iter.hasNext();)
        {
            Object element = (Object) iter.next();
            if (!res.contains(element))
            {
                res.add(element);
            }
        }
        return res;
    }
}