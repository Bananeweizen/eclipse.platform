<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.debug.core">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.debug.core" id="memoryRenderings" name="Memory Renderings"/>
      </appInfo>
      <documentation>
         Allows plug-ins to contribute renderings for memory blocks. A rendering translates raw bytes of a memory block into text that can be displayed in the memory view. The debug platform provides a HEX memory rendering. NOTE: this extension point was provided in the 3.0 release as experimental API, subject to change, and became public API in the 3.1 release.
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <choice>
            <element ref="rendering" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="rendering_binding" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="default_renderings" minOccurs="0" maxOccurs="unbounded"/>
         </choice>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  a fully qualified identifier of the target extension point
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  an optional identifier of the extension instance
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  an optional name of the extension instance
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="rendering">
      <annotation>
         <documentation>
            This element defines a rendering.  A rendering is comprised of an id, a name, an optional rendering factory, and an optional list of rendering properties.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="rendering_property" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="renderingId" type="string" use="required">
            <annotation>
               <documentation>
                  unique identifier for this rendering
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  human-readable name of this rendering
               </documentation>
            </annotation>
         </attribute>
         <attribute name="renderingFactory" type="string">
            <annotation>
               <documentation>
                  optional fully qualified name of the Java class that implements &lt;code&gt;org.eclipse.debug.core.memory.IMemoryRenderingFactory&lt;/code&gt;.  When unspecified, a default rendering factory will be used.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="rendering_property">
      <annotation>
         <documentation>
            Specifies rendering specific properties.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  human-readable name of this property
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string" use="required">
            <annotation>
               <documentation>
                  value of this property
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="rendering_binding">
      <annotation>
         <documentation>
            Binds a type of memory block with available renderings.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="memoryBlockTypeId" type="string" use="required">
            <annotation>
               <documentation>
                  identifies the type of memory block this binding is for. Corresponds to the identifier returned by &lt;code&gt;IExtendedMemoryBlock.getMemoryBlockType()&lt;/code&gt;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="renderingIds" type="string" use="required">
            <annotation>
               <documentation>
                  comma delimited list of memory renderings available for the associated type of memory block
               </documentation>
            </annotation>
         </attribute>
         <attribute name="memoryBlockClass" type="string">
            <annotation>
               <documentation>
                  fully qualified name of the Java class implementing a memory block. This attribute is &lt;b&gt;deprecated&lt;/b&gt; in release 3.1, and a &lt;code&gt;memoryBlockTypeId&lt;/code&gt; must be provided instead.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="default_renderings">
      <annotation>
         <documentation>
            Specifies the default renderings to create for a specific type of memory block.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="memoryBlockTypeId" type="string" use="required">
            <annotation>
               <documentation>
                  identifies the type of memory block this default renderings list is for. Corresponds to the identifier returned by &lt;code&gt;IExtendedMemoryBlock.getMemoryBlockType()&lt;/code&gt;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="renderingIds" type="string" use="required">
            <annotation>
               <documentation>
                  comma delimited list of of memory renderings to be created by default for memory blocks of the associated type.  Memory renderings are specified via their &lt;code&gt;renderingId&lt;/code&gt;. An equivalent rendering binding must exist for a default rendering to be considered.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="memoryBlockClass" type="string">
            <annotation>
               <documentation>
                  fully qualified name of the Java class implementing a memory block. This attribute is &lt;b&gt;deprecated&lt;/b&gt; in release 3.1, and a &lt;code&gt;memoryBlockTypeId&lt;/code&gt; must be provided instead.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         Eclipse 3.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2004 IBM Corporation and others.&lt;br&gt;
All rights reserved. This program and the accompanying materials are made 
available under the terms of the Common Public License v1.0 which 
accompanies this distribution, and is available at 
&lt;a href=&quot;http://www.eclipse.org/legal/cpl-v10.html&quot;&gt;http://www.eclipse.org/legal/cpl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
